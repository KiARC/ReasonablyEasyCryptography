package kotlin.asymmetric

import com.katiearose.reasonablyEasyCryptography.asymmetric.PEMHandler
import com.katiearose.reasonablyEasyCryptography.asymmetric.RSAEncryptionHandler
import java.security.PrivateKey

object PemAndUnPemAKey {
    @JvmStatic
    fun main(args: Array<String>) {
        //Generate a key, I'll use the private key from an RSA KeyPair generated by REC
        val key = RSAEncryptionHandler.generateKeyPair().private
        //Generate PEM for the key
        val pem = PEMHandler.keyToPem(key)
        //Convert PEM back to key. You have to cast it to the right type, either a PublicKey or a PrivateKey
        val newKey = PEMHandler.pemToKey(pem) as PrivateKey
    }
}